from machine import DAC, ADC, Pin
from m5stack import lcd
import time

# === CONFIGURAZIONE ===
DAC_PIN = 26                  # GPIO26 ‚Üí DAC1
ADC_PIN = 36                  # GPIO36 ‚Üí ADC1 (canale 0)
FILE_IN = 'rumore_bianco_dac_M5.txt'
FILE_OUT = 'ADC_Output.txt'
TS_US = 200                   # intervallo in ¬µs (5 kHz campionamento)

# === INIZIALIZZAZIONE ===
dac = DAC(Pin(DAC_PIN))
adc = ADC(Pin(ADC_PIN))
adc.atten(ADC.ATTN_11DB)      # Estende range ADC fino a 3.3 V (4095)

lcd.clear()
lcd.setRotation(3)
lcd.setCursor(10, 10)
lcd.print("Stimolazione e Acquisizione...")

try:
    infile = open(FILE_IN, 'r')
    outfile = open(FILE_OUT, 'w')
    print("‚úÖ File aperti correttamente.")
    count = 0

    for line in infile:
        try:
            # Stimolo DAC
            dac_val = int(line.strip())
            dac_val = max(0, min(255, dac_val))
            dac.write(dac_val)

            time.sleep_us(TS_US)

            # Lettura ADC
            adc_val = adc.read()
            outfile.write(str(adc_val) + '\n')  # Salva valore in file

            # üîç DEBUG seriale: stampa DAC e ADC
            print("DAC:", dac_val, "-> ADC:", adc_val)

            count += 1
            if count % 1000 == 0:
                lcd.fillRect(0, 30, 200, 20, lcd.BLACK)
                lcd.setCursor(10, 30)
                lcd.print("Campioni: {}".format(count))

        except Exception as e:
            print("‚ö†Ô∏è Errore DAC/ADC:", e)
            continue

    infile.close()
    outfile.close()

    lcd.setCursor(10, 60)
    lcd.print("Completato.")
    print("‚úÖ Stimolazione + Acquisizione completata. {} campioni.".format(count))

except Exception as e:
    print("‚ùå Errore apertura file:", e)
    lcd.setCursor(10, 60)
    lcd.print("Errore apertura file.")


CODICE UIFLOW CONVERSIONE ADC DAC
